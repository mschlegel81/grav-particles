

QUALITY:='qualityMeasure';
STARS:='stars';
SIZE:='size';




parseSystem(line:String)->begin
  local N:=line.split(';').trim.softCast.filter(::isNumeric);
  local qualityMeasure:=N[0];
  local stars:=N.tail.chunkMap(7,(star)->['mass'=>star[0],'p'=>star[[1..3]],'v'=>star[[4..6]]].toMap).toList;

  [QUALITY=>qualityMeasure,
   SIZE=>stars.size,
   STARS=>stars.sort((s)->-s['mass'])].toMap;
end;

memoized allSystems->fileLines('gravity.cached_sys.txt').pMap(::parseSystem).toList;

massRatio(sys:Map)->begin
  local masses:=sys[STARS].getInner('mass');
  masses.tail/masses.head;
end;

//kineticEnergy(sys:Map)->sys['stars'].each(star,star['mass']*euklideanNorm(star['v'])Â²,+);
//
//allSystems.filter((s)->s['size']=3).map(::kineticEnergy).toList.plot;
//allSystems.filter((s)->s['size']=2).map(::kineticEnergy).toList.addPlot;
//allSystems.filter((s)->s['size']=4).map(::kineticEnergy).toList.addPlot;

qualityHistograms->begin
  local Q:=allSystems.map((s)->[s[SIZE],s[QUALITY]]);
  setOptions(["x0"=>-1,"x1"=>1,"y0"=>1E-100,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>false,"logscaleY"=>true,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  group(Q.getInner(1),Q.getInner(0))
  .sort
  .each(G,addPlot(G[1]));
end;

qualityHistograms;
