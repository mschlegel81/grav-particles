

QUALITY:='qualityMeasure';
STARS:='stars';
SIZE:='size';


USE linAlg;


makeBase(v1,v2)->begin
  local a:=v1/euklideanNorm(v1);
  local c:=crossProd(v1,v2); c/=euklideanNorm(c);
  local b:=crossProd(c,a);
  [a,b,c].toSquareMatrix.invert;
end;

zeroOut(x)->vectorIfThenElse(abs(x)<1E-10,0,x);

transformStar(star:Map,transform:SquareMatrix)->begin
  ['mass'=>star['mass'],
   'p'   =>flatten([star['p']].toMatrix*transform).zeroOut,
   'v'   =>flatten([star['v']].toMatrix*transform).zeroOut];
end;


canonicalSystem(stars:List)->
  stars.size=1 ? stars :
  stars.size=2 ? begin
    local B:=makeBase(stars[1,'p']-stars[0,'p'],
                      stars[1,'v']-stars[0,'v']);
    stars.map((s)->transformStar(s,B));
  end : begin
    local B:=makeBase(stars[1,'p']-stars[0,'p'],
                      stars[2,'p']-stars[0,'p']);
    stars.map((s)->transformStar(s,B));
  end;


parseSystem(line:String)->begin
  local N:=line.split(';').trim.softCast.filter(::isNumeric);
  local qualityMeasure:=N[0];
  local stars:=N.tail.chunkMap(7,(star)->['mass'=>star[0],'p'=>star[[1..3]],'v'=>star[[4..6]]].toMap).toList;

  [QUALITY=>qualityMeasure,
   SIZE=>stars.size,
   STARS=>stars.sort((s)->-s['mass']).canonicalSystem].toMap;
end;

//memoized allSystems->fileLines('gravity.cached_sys.txt').pMap(::parseSystem).toList;
memoized allSystems->fileLines('gravity_debug.cached_sys.txt').pMap(::parseSystem).toList;

massRatio(sys:Map)->begin
  local masses:=sys[STARS].getInner('mass');
  masses.tail/masses.head;
end;


qualityHistograms->begin
  local Q:=allSystems.map((s)->[s[SIZE],s[QUALITY]]);
  setOptions(["x0"=>-1,"x1"=>1,"y0"=>1E-100,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>false,"logscaleY"=>true,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  group(Q.getInner(1),Q.getInner(0))
  .sort
  .each(G,addPlot(G[1]));
end;

qualityHistograms;

allSystems.filter((s)->s[SIZE]=3 AND s[QUALITY]>=1000);
